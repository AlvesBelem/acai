// Prisma schema for NextAuth + Products
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  LEAD
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  image     String?
  emailVerified DateTime?
  role      Role      @default(LEAD)
  createdAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]
  products  Product[]
  authenticators Authenticator[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  priceCents  Int
  imageUrl    String?
  checkoutUrl String?
  hotmartProductId String? @unique
  createdAt   DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}

// Auth models (Auth.js / NextAuth Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID        String   @id
  userId              String
  provider            String
  credentialPublicKey String
  counter             Int
  credentialDeviceType String
  credentialBackedUp  Boolean
  transports          String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model HotmartConfig {
  id             String   @id @default("singleton")
  clientId       String
  clientSecret   String
  basicToken     String
  webhookSecret  String?
  accessToken    String?
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


